name: Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  bump-version:
    name: Bump version
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.NODE_AUTH_TOKEN }}
      - name: Checkout submodules
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
          registry-url: "https://registry.npmjs.org/"
          scope: "@redhook"

      - name: Output the semver label
        id: output-semver-label
        uses: actions/github-script@v4
        with:
          result-encoding: string
          script: |
            const labels = context.payload.pull_request.labels;

            const semverLabels = labels.filter((label) => (
              label.name.match(/major|minor|patch/)
            ))

            // No other error checking, since the Reminders Action should have caught everything before allowing this PR to merge.

            return semverLabels[0].name;

      - name: Calculate the new version number
        run: |
          SEMVER_LEVEL="${{ steps.output-semver-label.outputs.result }}"

          # Get the current version from the package.json
          CURRENT_VERSION=$(jq --raw-output .version package.json)

          # Find the new version number using the given semver label
          NEW_VERSION=$(npx semver@7 --increment $SEMVER_LEVEL $CURRENT_VERSION)

          # Export the current version for further use
          echo NEW_VERSION=$NEW_VERSION >> $GITHUB_ENV

          echo "semver level:    $SEMVER_LEVEL"
          echo "current version: $CURRENT_VERSION"
          echo "new version:     $NEW_VERSION"

      - name: Configure git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Update and commit changelog
        run: |
          sed --in-place "s/x.x.x/$NEW_VERSION/" CHANGELOG.md

          mv CHANGELOG.md docs/changelogs/$NEW_VERSION.md

          cp .github/CHANGELOG.template.md CHANGELOG.md

          git add CHANGELOG.md docs/changelogs
          git commit -m 'Update changelog'

      - name: Increment version
        run: |
          npm version $NEW_VERSION

      - name: Push commits and tag
        run: |
          git push
          git push origin v$NEW_VERSION

    outputs:
      new-version: ${{ env.NEW_VERSION }}

  create-release:
    name: Create GitHub Release
    needs:
      - bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: main
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        with:
          tag_name: v${{ needs.bump-version.outputs.new-version }}
          release_name: Release v${{ needs.bump-version.outputs.new-version }}
          body_path: docs/changelogs/${{ needs.bump-version.outputs.new-version }}.md
          draft: false
          prerelease: false

  publish-to-github:
    name: Publish to NPM Packages
    needs:
      - bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: main
      - name: Use Node
        uses: actions/setup-node@v2
        with:
          scope: "@redhook"
      - name: Install dependencies
        run: yarn --immutable --imutable-cache
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
      - name: Publish to NPM Packages
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
